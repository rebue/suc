package rebue.suc.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import rebue.robotech.mapper.MybatisBaseMapper;
import rebue.suc.mo.SucUserMo;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

@Mapper
public interface SucUserMapper extends MybatisBaseMapper<SucUserMo, Long> {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	int insert(SucUserMo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	int insertSelective(SucUserMo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	SucUserMo selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	int updateByPrimaryKeySelective(SucUserMo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	int updateByPrimaryKey(SucUserMo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	List<SucUserMo> selectAll();

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	List<SucUserMo> selectSelective(SucUserMo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	boolean existByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table SUC_USER
	 *
	 * @mbg.generated 2018-02-25 16:21:26
	 */
	boolean existSelective(SucUserMo record);

	/**
	 * 根据邮箱获取用户信息
	 */
	@Select("select ID, LOGIN_NAME, LOGIN_PSWD, SALT, IS_VERIFIED_EMAIL, NICKNAME, FACE, QQ_NICKNAME, QQ_FACE, WX_NICKNAME, WX_FACE, IS_LOCK from SUC_USER "
			+ " where lower(EMAIL) = lower(#{email,jdbcType=VARCHAR})")
	SucUserMo selectByEmail(String email);

	/**
	 * 根据手机号获取用户信息
	 */
	@Select("select ID, LOGIN_NAME, LOGIN_PSWD, SALT, IS_VERIFIED_MOBILE, NICKNAME, FACE, QQ_NICKNAME, QQ_FACE, WX_NICKNAME, WX_FACE, IS_LOCK from SUC_USER "
			+ " where MOBILE = #{mobile,jdbcType=VARCHAR}")
	SucUserMo selectByMobile(String mobile);

	/**
	 * 根据用户登录名称获取用户信息
	 */
	@Select("select ID, LOGIN_NAME, LOGIN_PSWD, SALT, NICKNAME, FACE, QQ_NICKNAME, QQ_FACE, WX_NICKNAME, WX_FACE, IS_LOCK from SUC_USER "
			+ " where lower(LOGIN_NAME) = lower(#{loginName,jdbcType=VARCHAR})")
	SucUserMo selectByLoginName(String loginName);

	/**
	 * 根据QQ的id获取用户信息
	 */
	@Select("select ID, NICKNAME, QQ_NICKNAME, QQ_FACE, IS_LOCK from SUC_USER "
			+ " where QQ_ID = #{qqId,jdbcType=VARCHAR}")
	SucUserMo selectByQq(String qqId);

	/**
	 * 根据微信的id获取用户信息
	 */
	@Select("select ID, NICKNAME, WX_NICKNAME, WX_FACE, IS_LOCK from SUC_USER "
			+ " where WX_ID = #{wxId,jdbcType=VARCHAR}")
	SucUserMo selectByWx(String wxId);

	/**
	 * 锁定用户
	 */
	@Update("update SUC_USER set IS_LOCK=1 where ID=#{id}")
	int lock(Long id);

	/**
	 * 解锁用户
	 */
	@Update("update SUC_USER set IS_LOCK=0 where ID=#{id}")
	int unlock(Long id);
	
	/**
	 * 根据微信ID查询登录密码、密码组合码、微信ID
	 * Title: selectUserInfoByWx
	 * Description: 
	 * @param wxId
	 * @return
	 * @date 2018年4月28日 上午11:47:26
	 */
	@Select("SELECT LOGIN_PSWD, SALT, WX_ID FROM SUC_USER WHERE WX_ID = #{wxId,jdbcType=VARCHAR}")
	SucUserMo selectUserInfoByWx(@Param("wxId") String wxId);
	
	/**
	 * 根据微信ID修改登录密码
	 * Title: updateloginPswd
	 * Description: 
	 * @param wxId
	 * @param loginPswd
	 * @return
	 * @date 2018年4月28日 上午11:57:49
	 */
	@Update("UPDATE SUC_USER SET LOGIN_PSWD = #{loginPswd,jdbcType=VARCHAR} WHERE WX_ID = #{wxId,jdbcType=VARCHAR}")
	int updateloginPswd(@Param("wxId") String wxId, @Param("loginPswd") String loginPswd);
	
	/**
	 * 根据微信ID设置登录密码
	 * Title: setLoginPswd
	 * Description: 
	 * @param wxId
	 * @param loginPswd
	 * @param salt
	 * @return
	 * @date 2018年4月28日 上午11:59:04
	 */
	@Update("UPDATE SUC_USER SET LOGIN_PSWD = #{loginPswd,jdbcType=VARCHAR}, SALT = #{salt,jdbcType=VARCHAR} WHERE WX_ID = #{wxId,jdbcType=VARCHAR}")
	int setLoginPswd(@Param("wxId") String wxId, @Param("loginPswd") String loginPswd, @Param("salt") String salt);
	
	/**
	 * 根据微信ID设置登录名称
	 * Title: setLoginName
	 * Description: 
	 * @param wxId
	 * @param loginName
	 * @return
	 * @date 2018年5月3日 下午5:30:31
	 */
	@Update("UPDATE SUC_USER SET LOGIN_NAME = #{loginName,jdbcType=VARCHAR} WHERE WX_ID = #{wxId,jdbcType=VARCHAR}")
	int setLoginName(@Param("wxId") String wxId, @Param("loginName") String loginName);
	
	/**
	 * 根据微信ID获取用户登录名称
	 * Title: selectLoginNameByWx
	 * Description: 
	 * @param wxId
	 * @return
	 * @date 2018年5月4日 上午9:02:28
	 */
	@Select("SELECT LOGIN_NAME FROM SUC_USER WHERE WX_ID = #{wxId,jdbcType=VARCHAR}")
	String selectLoginNameByWx(@Param("wxId") String wxId);
}