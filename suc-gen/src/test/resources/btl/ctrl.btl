package ${modulePackage}.ctrl;

import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.PageInfo;

import ${moClassFullName};
import ${modulePackage}.svc.${entityName}Svc;
import ${modulePackage}.ro.${entityName}Ro;

@RestController
public class ${entityName}Ctrl {
    /**
     * @mbg.generated
     */
    private final static Logger _log = LoggerFactory.getLogger(${entityName}Ctrl.class);

    /**
     * @mbg.generated
     */
    @Resource
    private ${entityName}Svc svc;

    /**
     * 有唯一约束的字段名称
     *
     * @mbg.generated
     */
    private String _uniqueFilesName = "某字段内容";

    /**
     * 添加${entityTitle}
     *
     * @mbg.generated
     */
    @PostMapping("/${strutil.toLowerCase(entityNamePrefix)}/${strutil.toLowerCase(entitySimpleName)}")
    ${entityName}Ro add(@RequestBody ${moClassShortName} mo) throws Exception {
        _log.info("add ${moClassShortName}:" + mo);
        ${entityName}Ro ro = new ${entityName}Ro();
        try {
            int result = svc.add(mo);
            if (result == 1) {
                String msg = "添加成功";
                _log.info("{}: mo-{}", msg, mo);
                ro.setMsg(msg);
                ro.setResult((byte) 1);
                return ro;
            } else {
                String msg = "添加失败";
                _log.error("{}: mo-{}", msg, mo);
                ro.setMsg(msg);
                ro.setResult((byte) -1);
                return ro;
            }
        } catch (DuplicateKeyException e) {
            String msg = "添加失败，" + _uniqueFilesName + "已存在，不允许出现重复";
            _log.error("{}: mo-{}", msg, mo);
            ro.setMsg(msg);
            ro.setResult((byte) -1);
            return ro;
        }
    }

    /**
     * 修改${entityTitle}
     *
     * @mbg.generated
     */
    @PutMapping("/${strutil.toLowerCase(entityNamePrefix)}/${strutil.toLowerCase(entitySimpleName)}")
    ${entityName}Ro modify(@RequestBody ${moClassShortName} mo) throws Exception {
        _log.info("modify ${moClassShortName}:" + mo);
        ${entityName}Ro ro = new ${entityName}Ro();
        try {
            int result = svc.modify(mo);
            if (result == 1) {
                String msg = "修改成功";
                _log.info("{}: mo-{}", msg, mo);
                ro.setMsg(msg);
                ro.setResult((byte) 1);
                return ro;
            } else {
                String msg = "修改失败";
                _log.error("{}: mo-{}", msg, mo);
                ro.setMsg(msg);
                ro.setResult((byte) -1);
                return ro;
            }
        } catch (DuplicateKeyException e) {
            String msg = "修改失败，" + _uniqueFilesName + "已存在，不允许出现重复";
            _log.error("{}: mo-{}", msg, mo);
            ro.setMsg(msg);
            ro.setResult((byte) -1);
            return ro;
        }
    }

    /**
     * 删除${entityTitle}
     * 
     * @mbg.generated
     */
    @DeleteMapping("/${strutil.toLowerCase(entityNamePrefix)}/${strutil.toLowerCase(entitySimpleName)}")
    ${entityName}Ro del(<&
        for(id in ids){
            if(!idLP.first) {
                print(', ');
            }
            print('@RequestParam("');
            print(id.key);
            print('") ');
            print(id.value);
            print(' ');
            print(id.key);
        }
    &>) {
        _log.info("save ${moClassShortName}:" + <&
            for(id in ids){
                if(!idLP.first) {
                    print(', ');
                }
                print(id.key);
            }
        &>);
        int result = svc.del(<&
            for(id in ids){
                if(!idLP.first) {
                    print(', ');
                }
                print(id.key);
            }
        &>);

        ${entityName}Ro ro = new ${entityName}Ro();
        if (result == 1) {
            String msg = "删除成功";
            _log.info("{}: id-{}", msg, id);
            ro.setMsg(msg);
            ro.setResult((byte) 1);
            return ro;
        } else {
            String msg = "删除失败，找不到该记录";
            _log.error("{}: id-{}", msg, id);
            ro.setMsg(msg);
            ro.setResult((byte) -1);
            return ro;
        }
    }

    /**
     * 查询${entityTitle}
     * 
     * @mbg.generated
     */
    @GetMapping("/${strutil.toLowerCase(entityNamePrefix)}/${strutil.toLowerCase(entitySimpleName)}")
    PageInfo<${moClassShortName}> list(${moClassShortName} mo, @RequestParam("pageNum") int pageNum, @RequestParam("pageSize") int pageSize) {
        _log.info("list ${moClassShortName}:" + mo + ", pageNum = " + pageNum + ", pageSize = " + pageSize);
        if (pageSize > 50) {
            String msg = "pageSize不能大于50";
            _log.error(msg);
            throw new IllegalArgumentException(msg);
        }
        PageInfo<${moClassShortName}> result = svc.list(mo, pageNum, pageSize);
        _log.info("result: " + result);
        return result;
    }

    /**
     * 获取单个${entityTitle}
     * 
     * @mbg.generated
     */
    @GetMapping("/${strutil.toLowerCase(entityNamePrefix)}/${strutil.toLowerCase(entitySimpleName)}/getbyid")
    ${entityName}Ro getById(<&
        for(id in ids){
            if(!idLP.first) {
                print(', ');
            }
            print('@RequestParam("');
            print(id.key);
            print('") ');
            print(id.value);
            print(' ');
            print(id.key);
        }
    &>) {
        _log.info("get ${moClassShortName} by id: " + id);
        ${moClassShortName} result = svc.getById(id);
        _log.info("get: " + result);
        ${entityName}Ro ro = new ${entityName}Ro();
        if (result == null) {
            String msg = "获取失败，没有找到该条记录";
            _log.error("{}: id-{}", msg, id);
            ro.setMsg(msg);
            ro.setResult((byte) -1);
            return ro;
        } else {
            String msg = "获取成功";
            _log.info("{}: id-{}", msg, id);
            ro.setMsg(msg);
            ro.setResult((byte) 1);
            ro.setRecord(result);
            return ro;
        }
    }

}
